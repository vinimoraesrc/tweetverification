import re

contractions = {
  "ain't": "aint",
  "aren't": "arent",
  "can't": "cant",
  "could've": "couldve",
  "couldn't": "couldnt",
  "didn't": "didnt",
  "doesn't": "doesnt",
  "don't": "dont",
  "hadn't": "hadnt",
  "hasn't": "hasnt",
  "haven't": "havent",
  "he'd": "hed",
  "he'll": "hell",
  "he's": "hes",
  "how'd": "howd",
  "how'd'y": "howdy",
  "how'll": "howll",
  "how's": "hows",
  "i'd": "id",
  "i'll": "ill",
  "i'm": "im",
  "i've": "ive",
  "isn't": "isnt",
  "it'd": "itd",
  "it'll": "itll",
  "it's": "its",
  "let's": "lets",
  "ma'am": "maam",
  "mayn't": "maynt",
  "might've": "mightve",
  "mightn't": "mightnt",
  "must've": "mustve",
  "mustn't": "mustnt",
  "needn't": "neednt",
  "o'clock": "oclock",
  "shan't": "shant",
  "sha'n't": "shant",
  "she'd": "shed",
  "she'll": "shell",
  "she's": "shes",
  "should've": "shouldve",
  "shouldn't": "shouldnt",
  "so've": "sove",
  "so's": "sos",
  "that'd": "thatd",
  "that's": "thats",
  "there'd": "thered",
  "there's": "theres",
  "they'd": "theyd",
  "they'll": "theyll",
  "they're": "theyre",
  "they've": "theyve",
  "to've": "tove",
  "wasn't": "wasnt",
  "we'd": "wed",
  "we'll": "well",
  "we're": "were",
  "we've": "weve",
  "weren't": "werent",
  "what'll": "whatll",
  "what're": "whatre",
  "what's": "whats",
  "what've": "whatve",
  "when's": "whens",
  "when've": "whenve",
  "where'd": "whered",
  "where's": "wheres",
  "where've": "whereve",
  "who'll": "wholl",
  "who's": "whos",
  "who've": "whove",
  "why's": "whys",
  "why've": "whyve",
  "will've": "willve",
  "won't": "wont",
  "would've": "wouldve",
  "wouldn't": "wouldnt",
  "y'all": "yall",
  "y'alls": "yalls",
  "you'd": "youd",
  "you'll": "youll",
  "you're": "youre",
  "you've": "youve"
}

contractions_regex = re.compile('(%s)' % '|'.join(contractions.keys()))

def remove_contraction(text):
    common_removed = contractions_regex.sub(lambda m: contractions[m.group(0)], text)
    return common_removed[:-2] if common_removed.endswith("'s") else common_removed
  
def remove_contractions(texts):
    return [remove_contraction(text) for text in texts]

def remove_contractions_from_list(texts_list):
    return [remove_contractions(texts) for texts in texts_list if len(texts) > 0]